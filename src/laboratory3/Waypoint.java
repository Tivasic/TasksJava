package laboratory3;

/**
 * Этот класс представляет собой один шаг в пути, сгенерированном алгоритмом A*.
 * Путевые точки состоят из местоположения, предыдущей путевой точки в
 * пути и некоторых значений затрат, используемых для определения наилучшего пути.
 **/
public class Waypoint {
    /**
     * Местоположение этой точки.
     **/
    Location loc;

    /**
     * Предыдущая путевая точка на этом пути, или null, если это корень поиска A*.
     **/
    Waypoint prevWaypoint;

    /**
     * В этом поле хранится общая предыдущая стоимость получения от начального
     * местоположения до этой путевой точки.
     * Это фактическая стоимость следования по пути; она не включает никаких оценок.
     **/
    private float prevCost;

    /**
     * В этом поле хранится оценка оставшейся стоимости пути
     * из путевой точки к конечному пункту.
     **/
    private float remainingCost;


    /**
     * Создайте новую путевую точку для указанного местоположения. Предыдущая путевая точка
     * может быть дополнительно указано, или может быть null, чтобы
     * указать, что путевая точка является началом пути.
     **/
    public Waypoint(Location loc, Waypoint prevWaypoint) {
        this.loc = loc;
        this.prevWaypoint = prevWaypoint;
    }

    /**
     * Возвращает местоположение путевой точки.
     **/
    public Location getLocation() {
        return loc;
    }

    /**
     * Возвращает предыдущую путевую точку в пути или null, если это - это начало пути.
     **/
    public Waypoint getPrevious() {
        return prevWaypoint;
    }

    /**
     * Этот мутатор позволяет устанавливать как предыдущую стоимость,
     * так и оставшуюся стоимость в одном вызове метода.
     **/
    public void setCosts(float prevCost, float remainingCost) {
        this.prevCost = prevCost;
        this.remainingCost = remainingCost;
    }

    /**
     * Возвращает фактическую стоимость перехода с этой точки к начальной
     * точке местоположения, через ряд путевых точек в этой цепочке.
     **/
    public float getPreviousCost() {
        return prevCost;
    }


    /**
     * Возвращает общую сумму затрат для этой путевой точки. Это включает в
     * себя фактическую стоимость пути до этой точки из исходного местоположения, плюс
     * оценка оставшейся стоимости поездки из этой точки до
     * конечного пункта назначения.
     **/
    public float getTotalCost() {
        return prevCost + remainingCost;
    }
}

